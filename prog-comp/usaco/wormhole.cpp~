/*
  ID:   caizhuo2
  PROG: wormhole
  LANG: C++
*/

#include <iostream>
#include <fstream>
#include <cstdlib>
#include <algorithm>
using namespace std;

class Point {
public:
    int x, y;
    Point() {}
    Point(int _x, int _y) : x(_x), y(_y) {}
    operator() (const Point& a, const Point& b) {
	if (a.x == b.x) return a.y < b.y;
	else return a.x < b.x;
    }
};

bool hascycle(vector<vector<int>>& neighbors) {
    vector<bool> visited(neighbors.size(), false);
    
}

int main() {
    ifstream cin("wormhole.in");
    ofstream cout("wormhole.out");

    int N;
    cin >> N;
    vector<Point> points;
    for (int i = 0; i < N; i++) {
	int x, y;
	cin >> x >> y;
	points.push_back(Point(x, y));
    }
    sort(points.begin(), points.end(), Point());

    vector<vector<int>> neighbors(N, vector<int>());
    for (int i = 0; i < points.size() - 1; i++)
	if (points[i].x == points[i + 1].x)
	    neighbors[i].push_back(i + 1);

    int ans = 0;
    if (hascycle(neighbors)) ans++;
    cout << ans << endl;
    return 0;
}
