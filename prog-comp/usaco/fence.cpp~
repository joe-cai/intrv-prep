/*
  ID:   caizhuo2
  PROG: skidesign
  LANG: C++
*/

#include <iostream>
#include <fstream>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

void traverse(vector<vector<int>>& edges, vector<bool>& visited,
	      int start, int end, int numEdges) {
    visited[start] = true;
    cout << start << endl;
    for (int i = 0; i < edges[start].size(); i++)
	if (!visited[edges[start][i]] && edges[start][i] != end)
	    traverse(edges, visited, edges[start][i], start, end, numEdges);
}

int main() {
    int F;
    cin >> F;
    const int numNodes = 500;
    vector<vector<int>> edges(numNodes, vector<int>());
    for (int i = 0; i < F; i++) {
	int a, b;
	cin >> a >> b;
	edges[a - 1].push_back(b - 1);
	edges[b - 1].push_back(a - 1);
    }
    int start = -1, end = -1;
    for (int i = 0; i < numNodes; i++) {
	sort(edges[i].begin(), edges[i].end());
	if (edges[i].size() % 2 != 0 && start == -1) start = i;
	else if (edges[i].size() % 2 != 0) end = i;
    }
    if (start == -1 && end == -1) start = end = 0;
    else if (start > end) swap(start, end);
    traverse(edges, start, end, 0);
    return 0;
}
